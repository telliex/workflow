(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{171:function(t,e,_){t.exports=_.p+"assets/img/73607121b26944c77f657e62a8894e2d.73607121.png"},172:function(t,e,_){t.exports=_.p+"assets/img/Xnip2019-04-02_18-01-34.acf5c447.jpg"},173:function(t,e,_){t.exports=_.p+"assets/img/performance-01.13bc6d4b.png"},174:function(t,e,_){t.exports=_.p+"assets/img/performance-02.1be65388.png"},175:function(t,e,_){t.exports=_.p+"assets/img/Xnip2019-04-02_18-10-08.d6cbed0d.jpg"},176:function(t,e,_){t.exports=_.p+"assets/img/Xnip2019-04-02_18-33-24.b7bfb3a4.jpg"},223:function(t,e,_){"use strict";_.r(e);var v=[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"性能测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能测试","aria-hidden":"true"}},[this._v("#")]),this._v(" 性能测试")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:_(171),alt:"",width:"600"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"终端用户关注的性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#终端用户关注的性能","aria-hidden":"true"}},[this._v("#")]),this._v(" 终端用户关注的性能")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("系统响应时间，反应的是系统能力，又可以进一步细分为应用系统处理时间、数据库处理时间和网络传输时间等；")]),this._v(" "),e("li",[this._v("前端展现时间，取决于用户端的处理能力。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"系统运维人员关注的性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#系统运维人员关注的性能","aria-hidden":"true"}},[this._v("#")]),this._v(" 系统运维人员关注的性能")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"软件设计开发人员关注的性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#软件设计开发人员关注的性能","aria-hidden":"true"}},[this._v("#")]),this._v(" 软件设计开发人员关注的性能")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[_("p",[t._v("核心算法的设计与实现是否高效")])]),t._v(" "),_("li",[_("p",[t._v("必要时，设计上是否采用 buffer 机制以提高性能，降低 I/O")])]),t._v(" "),_("li",[_("p",[t._v("是否存在潜在的内存泄露")])]),t._v(" "),_("li",[_("p",[t._v("是否存在并发环境下的线程安全问题")])]),t._v(" "),_("li",[_("p",[t._v("是否存在不合理的线程同步方式")])]),t._v(" "),_("li",[_("p",[t._v("是否存在不合理的资源竞争")]),t._v(" "),_("p",[t._v("2.架构设计包含的内容：")])]),t._v(" "),_("li",[_("p",[t._v("站在整体系统的角度，是否可以方便地进行系统容量和性能扩展")])]),t._v(" "),_("li",[_("p",[t._v("应用集群的可扩展性是否经过测试和验证")])]),t._v(" "),_("li",[_("p",[t._v("缓存集群的可扩展性是否经过测试和验证")])]),t._v(" "),_("li",[_("p",[t._v("数据库的可扩展性是否经过测试和验证")]),t._v(" "),_("p",[t._v("3.性能最佳实践包含的点：")])]),t._v(" "),_("li",[_("p",[t._v("代码实现是否遵守开发语言的性能最佳实践")])]),t._v(" "),_("li",[_("p",[t._v("关键代码是否在白盒级别进行性能测试")])]),t._v(" "),_("li",[_("p",[t._v("是否考虑前端性能的优化")])]),t._v(" "),_("li",[_("p",[t._v("必要的时候是否采用数据压缩传输")])]),t._v(" "),_("li",[_("p",[t._v("对于既要压缩又要加密的场景，是否采用先压缩后加密的顺序")]),t._v(" "),_("p",[t._v("4.数据库相关的点：")])]),t._v(" "),_("li",[_("p",[t._v("数据库表设计是否高效")])]),t._v(" "),_("li",[_("p",[t._v("是否引入必要的索引")])]),t._v(" "),_("li",[_("p",[t._v("SQL 语句的执行计划是否合理")])]),t._v(" "),_("li",[_("p",[t._v("SQL 语句除了功能是否要考虑性能要求")])]),t._v(" "),_("li",[_("p",[t._v("数据库是否需要引入读写分离机制")])]),t._v(" "),_("li",[_("p",[t._v("系统冷启动后，缓存大量不命中的时候，数据库承载的压力是否超负荷")]),t._v(" "),_("p",[t._v("5.软件性能的可测试性包含的点：")])]),t._v(" "),_("li",[_("p",[t._v("是否为性能分析（Profiler）提供必要的接口支持")])]),t._v(" "),_("li",[_("p",[t._v("是否支持高并发场景下的性能打点")])]),t._v(" "),_("li",[_("p",[t._v("是否支持全链路的性能分析")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"性能测试人员眼中的软件性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能测试人员眼中的软件性能","aria-hidden":"true"}},[this._v("#")]),this._v(" 性能测试人员眼中的软件性能")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"衡量性能的常用指标：并发用户数、响应时间，以及系统吞吐量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#衡量性能的常用指标：并发用户数、响应时间，以及系统吞吐量","aria-hidden":"true"}},[this._v("#")]),this._v(" 衡量性能的常用指标：并发用户数、响应时间，以及系统吞吐量")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"✓-并发用户数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#✓-并发用户数","aria-hidden":"true"}},[this._v("#")]),this._v(" ✓ 并发用户数")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"获取用户行为模式的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取用户行为模式的方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 获取用户行为模式的方法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("已经上线的系统 - 采用系统日志分析法获取用户行为统计和峰值并发量等")]),this._v(" "),e("li",[this._v("未上线的全新系统 - 参考行业中类似系统的统计信息来建模，然后分析")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"✓-响应时间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#✓-响应时间","aria-hidden":"true"}},[this._v("#")]),this._v(" ✓ 响应时间")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("前端 - 呈现时间，取决于客户端收到服务器返回的数据后渲染页面所消耗的时间。可采用提前渲染技术，使得用户实际感受到的响应时间通常要小于标准定义的响应时间。"),e("br"),this._v("\n后端 - 系统响应时间，又可以进一步划分为 Web 服务器时间、应用服务器时间、数据库时间，以及各服务器间通信的网络时间。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"✓-系统吞吐量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#✓-系统吞吐量","aria-hidden":"true"}},[this._v("#")]),this._v(" ✓ 系统吞吐量")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("盲点："),e("br"),this._v("\n比如，某个测试场景中采用 100 个并发用户，每个用户每隔 1 秒发出一个 Request，另外一个测试场景采用 1000 个并发用户，每个用户每隔 10 秒发出一个 Request。显然这两个场景具有相同的吞吐量, 都是 100 Requests/second，但是两种场景下的系统性能拐点肯定不同。因为，两个场景所占用的资源是不同的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"常用的七种性能测试方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用的七种性能测试方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 常用的七种性能测试方法")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("table",[_("thead",[_("tr",[_("th"),t._v(" "),_("th",[t._v("能力验证")]),t._v(" "),_("th",[t._v("能力规划")]),t._v(" "),_("th",[t._v("性能调优")]),t._v(" "),_("th",[t._v("缺陷发现")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("后端性能测试")]),t._v(" "),_("td",[t._v("v")]),t._v(" "),_("td",[t._v("v")]),t._v(" "),_("td",[t._v("v")]),t._v(" "),_("td",[t._v("v")])]),t._v(" "),_("tr",[_("td",[t._v("前端性能测试")]),t._v(" "),_("td"),t._v(" "),_("td"),t._v(" "),_("td",[t._v("v")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("代码级性能测试")]),t._v(" "),_("td"),t._v(" "),_("td"),t._v(" "),_("td",[t._v("v")]),t._v(" "),_("td",[t._v("v")])]),t._v(" "),_("tr",[_("td",[t._v("压力测试")]),t._v(" "),_("td",[t._v("v")]),t._v(" "),_("td",[t._v("v")]),t._v(" "),_("td",[t._v("v")]),t._v(" "),_("td",[t._v("v")])]),t._v(" "),_("tr",[_("td",[t._v("配置测试")]),t._v(" "),_("td"),t._v(" "),_("td",[t._v("v")]),t._v(" "),_("td",[t._v("v")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("并发测试")]),t._v(" "),_("td"),t._v(" "),_("td"),t._v(" "),_("td",[t._v("v")]),t._v(" "),_("td",[t._v("v")])]),t._v(" "),_("tr",[_("td",[t._v("可靠性测试")]),t._v(" "),_("td",[t._v("v")]),t._v(" "),_("td",[t._v("v")]),t._v(" "),_("td",[t._v("v")]),t._v(" "),_("td")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("量化页面的加载时间、首字节时间、渲染开始时间、最早页面可交互时间、页面中各种资源的字节数、后端请求数量等一系列数据；")]),this._v(" "),e("li",[this._v("给出页面性能评价指标，提出改进点")]),this._v(" "),e("li",[this._v("提供 Filmstrip 视图、Waterfall 视图、Connection 视图、Request 详情视图和页面加载视频慢动作。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("预检视页面")]),this._v(" "),e("li",[this._v("选择发起地点与浏览器")]),this._v(" "),e("li",[this._v("环境网路速度")]),this._v(" "),e("li",[this._v("选择 First View and Repeat View")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:_(172),alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:_(173),alt:""}}),e("br"),this._v(" "),e("img",{attrs:{src:_(174),alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("先看到右上角"),e("br"),this._v(" "),e("img",{attrs:{src:_(175),alt:""}})])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ol",[_("li",[t._v("First Byte Time - 指的是用户发起页面请求到接收到服务器返回的第一个字节所花费的时间。")]),t._v(" "),_("li",[t._v("Keep-alive Enabled - 针对页面上用到的 Web 资源（图片、JavaScript、CSS），尽可能重用已经建立好的链接，而避免每次使用都去创建新的链接。")]),t._v(" "),_("li",[t._v("Compress Transfer - 如果将页面上的各种文本类的资源，比如 Html、JavaScript、CSS 等，可进行压缩传输部分")]),t._v(" "),_("li",[t._v("Compress Images - 图像文件进行压缩处理。也推荐 JPEG 格式图片使用渐进式 JPEG（Progressive JPEG）技术")]),t._v(" "),_("li",[t._v("Cache Static Content - 一般情况下，页面上的静态资源不会经常变化，可以缓存这些资源，并减少 Web 服务器的负载。")]),t._v(" "),_("li",[t._v("Effective use of CDN - 采用 CDN 缓存服务器。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("其他指标"),e("br"),this._v(" "),e("img",{attrs:{src:_(176),alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("Start Render - 浏览器开始渲染的时间")]),this._v(" "),e("li",[this._v("First Interactive - 最早的页面可交互时间。")]),this._v(" "),e("li",[this._v("Speed Index - 衡量体验的数值，通常来讲，它的值越小越好。")])])}],r=_(0),s=Object(r.a)({},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),_("p",[t._v("以软件系统为例，不同角色关注的性能重点不同")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),_("p",[t._v("大量用户并发访问时的负载，以及可能的更大负载情况下的系统健康状态、并发处理能力、当前部署的系统容量、可能的系统瓶颈、系统配置层面的调优、数据库的调优，以及长时间运行稳定性和可扩展性。")]),t._v(" "),t._m(5),t._v(" "),_("p",[t._v("1.算法设计包含的点：")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),_("p",[t._v("全盘考量，关注算法设计、架构设计、性能最佳实践、数据库相关、软件性能的可测试性这五大方面，各个击破。")]),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),_("p",[t._v("一间公司 5000 名员工拥有帐号，假设在某一时间点上，这 2500 个用户中，30% 用户处于页面浏览状态（对服务器没有发起请求），20% 用户在填写订单（也没有对服务器发起请求），5% 用户在递交订单，15% 用户在查询订单，而另外的 30% 用户没有进行任何操作。那么此时，这 2500 个“并发用户”中真正对服务器产生压力的只有 500 个用户（（5%+15%）*2500=500）。")]),t._v(" "),_("p",[t._v("分析得到准确的用户行为模式，是性能测试中的关键一环。")]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),_("p",[t._v("应用系统从请求发出开始，到客户端接收到最后一个字节数据所消耗的时间")]),t._v(" "),_("p",[t._v("对于软件服务器端的性能测试肯定要采用标准定义，而对于前端性能评估，则应该采用用户主观感受时间的定义。")]),t._v(" "),t._m(13),t._v(" "),_("p",[t._v("响应时间，分为前端展现时间和系统响应时间两部分。其中，前端时间，又称呈现时间，取决于客户端收到服务器返回的数据后渲染页面所消耗的时间；而系统响应时间，又可以进一步划分为 Web 服务器时间、应用服务器时间、数据库时间，以及各服务器间通信的网络时间。")]),t._v(" "),t._m(14),t._v(" "),_("p",[t._v("所有对吞吐量的讨论都必须以“单位时间”作为基本前提")]),t._v(" "),_("p",[t._v("Requests/Second、Pages/Second、Bytes/Second 皆表示吞吐量。")]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),_("p",[t._v("1.后端性能测试（Back-end Performance Test）"),_("br"),t._v("\n除了包括并发用户数、响应时间和系统吞吐量外，还应该包括各类资源的使用率，比如 CPU 占用率、内存使用率、磁盘 I/O 和网络 I/O 等 2.前端性能测试（Front-end Performance Test）"),_("br"),t._v(" "),_("a",{attrs:{href:"https://developer.yahoo.com/performance/rules.html?guccounter=1",target:"_blank",rel:"noopener noreferrer"}},[t._v("雅虎（Yahoo）前端团队总结的 7 大类 35 条前端优化"),_("OutboundLink")],1),t._v(" 3.代码级性能测试（Code-level Performance Test）"),_("br"),t._v("\n单元测试阶段就对代码的时间性能和空间性能进行必要的测试和评估 4.压力测试（Load/Stress Test）"),_("br"),t._v("\n并试图找到系统处于临界状态时的主要瓶颈点。 5.配置测试（Configuration Test）"),_("br"),t._v("\n先通过性能基准测试（Performance Benchmark）建立性能基线（Performance Baseline），再加入不同配置条件，找到特定压力下的配置 6.并发测试（Concurrence Test） 7.可靠性测试（Reliability Test）"),_("br"),t._v("\n真实环境下会有高峰和低谷的交替变化，模拟出真实的负载情况，我们会每 12 小时模拟一个高峰负载，两个高峰负载中间会模拟一个低峰负载，依次循环 3-7 天，形成一个类似于“波浪形”的系统测试负载曲线。")]),t._v(" "),t._m(17),t._v(" "),_("h2",{attrs:{id:"tool-webpagetest"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tool-webpagetest","aria-hidden":"true"}},[t._v("#")]),t._v(" Tool: "),_("a",{attrs:{href:"https://www.webpagetest.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebPagetest"),_("OutboundLink")],1)]),t._v(" "),_("p",[t._v("特点")]),t._v(" "),t._m(18),t._v(" "),_("p",[t._v("使用方法")]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),_("p",[t._v("以"),_("a",{attrs:{href:"https://www.webpagetest.org/result/190402_25_83f456b0ed8c947cdbcb989d9d9bf7a9/1/performance_optimization/",target:"_blank",rel:"noopener noreferrer"}},[t._v("寒舍欣和"),_("OutboundLink")],1),t._v(" 来说，结果如下")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25)])},v,!1,null,null,null);e.default=s.exports}}]);